apiVersion: serverless.kyma-project.io/v1alpha1
kind: Function
metadata:
  name: paymentcallback1
  namespace: #{POD_NAMESPACE_NAME}#
  labels:
    app: paymentcallback1
spec:
  deps: |-
{ 
  "name": "paymentcallback1",
  "version": "1.0.0",
  "dependencies": {
    "axios" : "^0.21.0"
  },
  "buildparameters" : {
    "enable_api" : true
  }
}
  maxReplicas: #{POD_MAX_COUNT}#
  minReplicas: #{POD_MIN_COUNT}#
  resources:
    limits:
      cpu: "#{POD_LIMIT_CPU}#"
      memory: "#{POD_LIMIT_MEM}#"
    requests:
      cpu: "#{POD_REQ_CPU}#"
      memory: "#{POD_REQ_MEM}#"
  env:
  - name: content
    value: application/json
  - name: channel
    value: App
  - name: x_programid
    value: tcp
  runtime: nodejs12
  source: |-
const axios = require('axios')

module.exports = { 
  main: function (event, context) {
    let input_data = event.extensions.request.body
    let payment_data = JSON.parse(input_data.toString())
    let payment_status = payment_data.order.status.toLowerCase()

    if (payment_status === "failed") {
      event.extensions.response.status(400)
      let payment_failure = {
        status : 400,
        message : "ERROR",
        error : {
          message : `Payment Failed for OrderId ${payment_data.order.orderId}`
        },
        code : "ERR001"
      }
      console.log(payment_failure)
      return payment_failure
    }

    let fetchCart_data = JSON.stringify({})
    var fetchCart_config = {
      method : 'get',
      url : 'http://caas.dev-r2-uc.tatadigital.com/carts/fetchCartDetails',
      headers : {
        "X-ProgramID" : process.env['x_programid'],
        "customerId" : payment_data.order.custId,
        "Content-Type" : process.env['content']
      },
      params : {
        "cartId" : payment_data.order.attribute2
      },
      data : fetchCart_data
    }

    let fetchCart_response = axios(fetchCart_config)
    .then(function (response) {
      let fetchCart_response = response.data
      let fetchCart_bundles = fetchCart_response.data.cart.bundles
      let productId = []
      
      for (let i=0; i<fetchCart_bundles.length;i++) {
        let orderEntries = fetchCart_bundles[i].orderEntries
        for (let j=0; j<orderEntries.length; j++) {
          let digital_product = orderEntries[j].isDigital
          if (digital_product === true) {
            productId.push(orderEntries[j].productId)
          }
        }
      }
      
      if (payment_status !== "success") {
        if (productId.length === 0) {
          let order_request = {
            purchaseOrderNumber : fetchCart_response.data.cart.code,
            customerHash : fetchCart_response.data.cart.customerId,
            bundles : fetchCart_response.data.cart.bundles,
            paymentUsing : payment_data
          }

          let order_data = JSON.stringify(order_request)
          var order_config = {
            method : 'post',
            url : 'http://orders.dev-r2-uc.tatadigital.com/order',
            headers : {
              "X-ProgramID" : process.env['x_programid'],
              "Channel" : process.env['channel'],
              "Content-Type" : process.env['content']
            },
            data : order_data
          }

          let order_response = axios(order_config)
          .then(function (response) {
            console.log(response.data)
            return response.data
          })
          .catch(function (error) {
            event.extensions.response.status(500)
            if (error) {
              let order_error = {
                status : 500,
                message : "ERROR",
                error : {
                  message : "Please check order details"
                },
                code : "ERR003"
              }
              console.log(order_error)
              return order_error
            }
          })
          return order_response
        }
        else if (productId.length !== 0) {
          let fetchProduct_request = {
            productIds : productId
          }
          
          let fetchProduct_data = JSON.stringify(fetchProduct_request)
          var fetchProduct_config = {
            method : 'post',
            url : 'http://pim.dev-r2-uc.tatadigital.com/fetchProducts',
            headers : {
              "X-ProgramID" : process.env['x_programid'],
              "Content-Type" : process.env['content']
            },
            data : fetchProduct_data
          }

          let fetchProduct_response = axios(fetchProduct_config)
          .then(function (response) {
            let fetchProduct_response = response.data
            let fetchProduct = fetchProduct_response.data.products
            let fetchProduct_status = fetchProduct_response.status
            
            if (fetchProduct_status === 0) {
              console.log(fetchProduct_response)
              return fetchProduct_response
            }
            
            for (let i=0; i<fetchProduct.length; i++) {
              for (let j=0; j<fetchCart_bundles.length; j++) {
                let orderEntries = fetchCart_bundles[j].orderEntries
                for (let k=0; k<orderEntries.length; k++) {
                  if (fetchProduct[i]._id == orderEntries[k].productId) {
                    let product_type = fetchProduct[i].digitalSubType
                    if (product_type === undefined || product_type === null) {
                      let productType = {"digitalSubType" : null}
                      orderEntries[k] = Object.assign(orderEntries[k], productType)
                    }
                    else {
                      let productType = {"digitalSubType" : product_type}
                      orderEntries[k] = Object.assign(orderEntries[k], productType)
                    }
                  }
                }
              }
            }
            
            let order_request = {
              purchaseOrderNumber : fetchCart_response.data.cart.code,
              customerHash : fetchCart_response.data.cart.customerId,
              bundles : fetchCart_bundles,
              paymentUsing : payment_data
            }
            
            let order_data = JSON.stringify(order_request)
            var order_config = {
              method : 'post',
              url : 'http://orders.dev-r2-uc.tatadigital.com/order',
              headers : {
                "X-ProgramID" : process.env['x_programid'],
                "Channel" : process.env['channel'],
                "Content-Type" : process.env['content']
              },
              data : order_data
            }

            let order_response = axios(order_config)
            .then(function (response) {
              console.log(response.data)
              return response.data
            })
            .catch(function (error) {
              event.extensions.response.status(500)
              if (error) {
                let order_error = {
                  status : 500,
                  message : "ERROR",
                  error : {
                    message : "Please check order details"
                  },
                  code : "ERR003"
                }
                console.log(order_error)
                return order_error
              }
            })
            return order_response
          })
          .catch(function (error) {
            event.extensions.response.status(500)
            if (error) {
              let fetchProduct_error = {
                status : 500,
                message : "ERROR",
                error : {
                  message : "Please check fetchProduct details"
                },
                code : "ERR007"
              }
              console.log(fetchProduct_error)
              return fetchProduct_error
            }
          })
          return fetchProduct_response
        }
      }
      else if (payment_status === "success") {
        if (productId.length === 0) {
          let order_request = {
            purchaseOrderNumber : fetchCart_response.data.cart.code,
            customerHash : fetchCart_response.data.cart.customerId,
            bundles : fetchCart_response.data.cart.bundles,
            paymentUsing : payment_data
          }
          
          
          let order_data = JSON.stringify(order_request)
          var order_config = {
            method : 'post',
            url : 'http://orders.dev-r2-uc.tatadigital.com/order',
            headers : {
              "X-ProgramID" : process.env['x_programid'],
              "Channel" : process.env['channel'],
              "Content-Type" : process.env['content']
            },
            data : order_data
          }

          let order_response = axios(order_config)
          .then(function (response) {
            let order_response = response.data
            return order_response
            let id = {
              cartId : payment_data.order.attribute2
            }

            let deleteCart_data = JSON.stringify(id)
            var deleteCart_config = {
              method : 'post',
              url : 'http://caas.dev-r2-uc.tatadigital.com/carts/deleteCloneCart',
              headers : {
                "X-ProgramID" : process.env['x_programid'],
                "customerId" : fetchCart_response.data.cart.customerId,
                "Content-Type" : process.env['content']
              },
              data : deleteCart_data
            }

            let deleteCart_response = axios(deleteCart_config)
            .then(function (response) {
              let deleteCart_response = response.data
              let deleteCart_status = deleteCart_response.status
              if (deleteCart_status === 400) {
                console.log(deleteCart_response)
                return deleteCart_response
              }

              let lineItems = []

              for (let i=0; i<fetchCart_bundles.length; i++) {
                let orderEntries = fetchCart_bundles[i].orderEntries
                for (let j=0; j<orderEntries.length; j++) {
                  let digital_product = orderEntries[j].isDigital
                  if (digital_product === null || digital_product === false || digital_product === "" || digital_product === undefined) {
                    let product = {
                      productId : orderEntries[j].productId
                    }
                    lineItems.push(product)
                  }
                }
              }

              for (let i=0; i<lineItems.length; i++) {
                for (let j=0; j<fetchCart_bundles.length; j++) {
                  let orderEntries = fetchCart_bundles[j].orderEntries
                  for (let k=0; k<orderEntries.length; k++) {
                    let digital_product = orderEntries[k].isDigital
                    if (digital_product === null || digital_product === false || digital_product === "" || digital_product === undefined) {
                      let warehouse_details = orderEntries[k].warehouse
                      if (warehouse_details !== null || warehouse_details !== undefined) {
                      for (let l=0; l<warehouse_details.length; l++) {
                        let product_skuId = orderEntries[k].productId.split("_").pop()
                        let reserv_skuId = warehouse_details[l].reservationId.split("_")[2]
                        if (product_skuId === reserv_skuId) {
                          let warehouse = {"warehouse" : [warehouse_details[l]]}
                          lineItems[i] = Object.assign(lineItems[i], warehouse)
                        }
                      }}
                    }
                  }
                }
              }

              let promise_request = {
                promiseStock : {
                  cartId : payment_data.order.attribute2,
                  programId : "UniversalCart",
                  customerHash : fetchCart_response.data.cart.customerId,
                  lineItems : lineItems
                }
              }

              let promise_data = JSON.stringify(promise_request)
              var promise_config = {
                method : 'post',
                url : 'http://inventory.dev-r2-uc.tatadigital.com/promise',
                headers : {
                  "X-ProgramID" : process.env['x_programid'],
                  "Content-Type" : process.env['content']
                },
                data : promise_data
              }

              let promise_response = axios(promise_config)
              .then(function (response) {
                let promise_response = response.data
                let promise_status = promise_response.status

                if (promise_status === 0) {
                  console.log(promise_response)
                  return promise_response
                }

                console.log(order_response)
                return order_response
              })
              .catch(function (error) {
                event.extensions.response.status(500)
                if (error) {
                  let promise_error = {
                    status : 500,
                    message : "ERROR",
                    error : {
                      message : "Please check promise details"
                    },
                    code : "ERR004"
                  }
                  console.log(promise_error)
                  return promise_error
                }
              })
              return promise_response
            })
            .catch(function (error) {
              event.extensions.response.status(500)
              if (error) {
                if (error.response.data.error.code === "ERR004") {
                  let error1 = {
                    status : 500,
                    message : "ERROR",
                    error : {
                      message : "cart not available for customerHash"
                    },
                    code : "ERR005"
                  }
                  console.log(error1)
                  return error1
                }
                else if (error.response.data.error.code === "ERR014") {
                  let error2 = {
                    status : 500,
                    message : "ERROR",
                    error : {
                      message : "Cart is already deleted"
                    },
                    code : "ERR006"
                  }
                  console.log(error2)
                  return error2
                }
              }
            })
            return deleteCart_response
          })
          .catch(function (error) {
            event.extensions.response.status(500)
            if (error) {
              let order_error = {
                status : 500,
                message : "ERROR",
                error : {
                  message : "Please check order details"
                },
                code : "ERR003"
              }
              console.log(order_error)
              return order_error
            }
          })
          return order_response
        }
        else if (productId.length !== 0) {
          let fetchProduct_request = {
            productIds : productId
          }
          
          let fetchProduct_data = JSON.stringify(fetchProduct_request)
          var fetchProduct_config = {
            method : 'post',
            url : 'http://pim.dev-r2-uc.tatadigital.com/fetchProducts',
            headers : {
              "X-ProgramID" : process.env['x_programid'],
              "Content-Type" : process.env['content']
            },
            data : fetchProduct_data
          }

          let fetchProduct_response = axios(fetchProduct_config)
          .then(function (response) {
            let fetchProduct_response = response.data
            let fetchProduct = fetchProduct_response.data.products
            let fetchProduct_status = fetchProduct_response.status
            
            if (fetchProduct_status === 0) {
              console.log(fetchProduct_response)
              return fetchProduct_response
            }

            for (let i=0; i<fetchProduct.length; i++) {
              for (let j=0; j<fetchCart_bundles.length; j++) {
                let orderEntries = fetchCart_bundles[j].orderEntries
                for (let k=0; k<orderEntries.length; k++) {
                  if (fetchProduct[i]._id == orderEntries[k].productId) {
                    let product_type = fetchProduct[i].digitalSubType 
                    if (product_type === undefined || product_type === null) {
                      let productType = {"digitalSubType" : null}
                      orderEntries[k] = Object.assign(orderEntries[k], productType)
                    }
                    else {
                      let productType = {"digitalSubType" : product_type}
                      orderEntries[k] = Object.assign(orderEntries[k], productType)
                    }
                  }
                }
              }
            }
            
            let order_request = {
              purchaseOrderNumber : fetchCart_response.data.cart.code,
              customerHash : fetchCart_response.data.cart.customerId,
              bundles : fetchCart_bundles,
              paymentUsing : payment_data
            }
            
            let order_data = JSON.stringify(order_request)
            var order_config = {
              method : 'post',
              url : 'http://orders.dev-r2-uc.tatadigital.com/order',
              headers : {
                "X-ProgramID" : process.env['x_programid'],
                "Channel" : process.env['channel'],
                "Content-Type" : process.env['content']
              },
              data : order_data
            }

            let order_response = axios(order_config)
            .then(function (response) {
              let order_response = response.data
              return order_response
              let id = {
                cartId : payment_data.order.attribute2
              }
              
              let deleteCart_data = JSON.stringify(id)
              var deleteCart_config = {
                method : 'post',
                url : 'http://caas.dev-r2-uc.tatadigital.com/carts/deleteCloneCart',
                headers : {
                  "X-ProgramID" : process.env['x_programid'],
                  "customerId" : fetchCart_response.data.cart.customerId,
                  "Content-Type" : process.env['content']
                },
                data : deleteCart_data
              }

              let deleteCart_response = axios(deleteCart_config)
              .then(function (response) {
                let deleteCart_response = response.data
                let deleteCart_status = deleteCart_response.status
                if (deleteCart_status === 400) {
                  console.log(deleteCart_response)
                  return deleteCart_response
                }
                
                let lineItems = []

                for (let i=0; i<fetchCart_bundles.length; i++) {
                  let orderEntries = fetchCart_bundles[i].orderEntries
                  for (let j=0; j<orderEntries.length; j++) {
                    let digital_product = orderEntries[j].isDigital
                    if (digital_product === null || digital_product === false || digital_product === "" || digital_product === undefined) {
                      let product = {
                        productId : orderEntries[j].productId
                      }
                      lineItems.push(product)
                    }
                  }
                }

                for (let i=0; i<lineItems.length; i++) {
                  for (let j=0; j<fetchCart_bundles.length; j++) {
                    let orderEntries = fetchCart_bundles[j].orderEntries
                    for (let k=0; k<orderEntries.length; k++) {
                      let digital_product = orderEntries[k].isDigital
                      if (digital_product === null || digital_product === false || digital_product === "" || digital_product === undefined) {
                        let warehouse_details = orderEntries[k].warehouse
                        if (warehouse_details !== null || warehouse_details !== undefined) {
                        for (let l=0; l<warehouse_details.length; l++) {
                          let product_skuId = orderEntries[k].productId.split("_").pop()
                          let reserv_skuId = warehouse_details[l].reservationId.split("_")[2]
                          if (product_skuId === reserv_skuId) {
                            let warehouse = {"warehouse" : [warehouse_details[l]]}
                            lineItems[i] = Object.assign(lineItems[i], warehouse)
                          }
                        }}
                      }
                    }
                  }
                }

                let promise_request = {
                  promiseStock : {
                    cartId : payment_data.order.attribute2,
                    programId : "UniversalCart",
                    customerHash : fetchCart_response.data.cart.customerId,
                    lineItems : lineItems
                  }
                }

                let promise_data = JSON.stringify(promise_request)
                var promise_config = {
                  method : 'post',
                  url : 'http://inventory.dev-r2-uc.tatadigital.com/promise',
                  headers : {
                    "X-ProgramID" : process.env['x_programid'],
                    "Content-Type" : process.env['content']
                  },
                  data : promise_data
                }

                let promise_response = axios(promise_config)
                .then(function (response) {
                  let promise_response = response.data
                  let promise_status = promise_response.status

                  if (promise_status === 0) {
                    console.log(promise_response)
                    return promise_response
                  }

                  console.log(order_response)
                  return order_response
                })
                .catch(function (error) {
                  event.extensions.response.status(500)
                  if (error) {
                    let promise_error = {
                      status : 500,
                      message : "ERROR",
                      error : {
                        message : "Please check promise details"
                      },
                      code : "ERR004"
                    }
                    console.log(promise_error)
                    return promise_error
                  }
                })
                return promise_response
              })
              .catch(function (error) {
                event.extensions.response.status(500)
                if (error) {
                  if (error.response.data.error.code === "ERR004") {
                    let error1 = {
                      status : 500,
                      message : "ERROR",
                      error : {
                        message : "cart not available for customerHash"
                      },
                      code : "ERR005"
                    }
                    console.log(error1)
                    return error1
                  }
                  else if (error.response.data.error.code === "ERR014") {
                    let error2 = {
                      status : 500,
                      message : "ERROR",
                      error : {
                        message : "Cart is already deleted"
                      },
                      code : "ERR006"
                    }
                    console.log(error2)
                    return error2
                  }
                }
              })
              return deleteCart_response
            })
            .catch(function (error) {
              event.extensions.response.status(500)
              if (error) {
                let order_error = {
                  status : 500,
                  message : "ERROR",
                  error : {
                    message : "Please check order details"
                  },
                  code : "ERR003"
                }
                console.log(order_error)
                return order_error
              }
            })
            return order_response
          })
          .catch(function (error) {
            event.extensions.response.status(500)
            if (error) {
              let fetchProduct_error = {
                status : 500,
                message : "ERROR",
                error : {
                  message : "Please check fetchProduct details"
                },
                code : "ERR007"
              }
              console.log(fetchProduct_error)
              return fetchProduct_error
            }
          })
          return fetchProduct_response
        }
        
      }
    })
    .catch(function (error) {
      event.extensions.response.status(500)
      if (error) {
        let fetchCart_error = {
          status : 500,
          message : "ERROR",
          error : {
            message : "Please check fetchCart details"
          },
          code : "ERR002"
        }
        console.log(fetchCart_error)
        return fetchCart_error
      }
    })
    return fetchCart_response
  }
}
---
apiVersion : gateway.kyma-project.io/v1alpha1
kind : APIRule
metadata :
  name : paymentcallback1
  namespace : #{POD_NAMESPACE_NAME}#
spec :
  gateway : kyma-gateway.kyma-system.svc.cluster.local
  rules :
    - accessStrategies :
        - config : {}
          handler : noop
      methods : 
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
        - HEAD
      path : /.*
  service :
    host : https://paymentcallback1.#{POD_SS_DOMAIN}#-ao.tatadigital.com
    name : paymentcallback1
    port : 80
